#include <WiFi.h>
#include <PubSubClient.h>

// Configurações de rede Wi-Fi
const char* ssid = "gabs";
const char* password = "01052019";

// Configurações do broker MQTT
const char* mqtt_server = "test.mosquitto.org";
const int mqtt_port = 1883;

WiFiClient espClient;
PubSubClient client(espClient);

// Pinos e variáveis
int PinoAnalogico = 4;  // Pino analógico do sensor
int Rele = 14;          // Pino do relé
int ValAnalogIn;        // Valor lido do sensor
int UltimaUmidade = -1; // Valor anterior da umidade
bool ManualOverride = false; // Controle manual
unsigned long ultimaPublicacao = 0; // Armazena o tempo da última publicação
const unsigned long intervaloPublicacao = 60000; // 1 minuto

void setup() {
    Serial.begin(9600);
    setup_wifi();

    client.setServer(mqtt_server, mqtt_port);
    client.setCallback(callback);

    pinMode(Rele, OUTPUT);
}

void loop() {
    if (!client.connected()) {
        reconnect();
    }
    client.loop();

    ValAnalogIn = analogRead(PinoAnalogico);

  
    int Porcento = map(ValAnalogIn, 850, 350, 0, 100); 
    Porcento = constrain(Porcento, 0, 100); 

    // Publica o valor da umidade apenas se mudou ou passou 1 minuto
    unsigned long tempoAtual = millis();
    if (Porcento != UltimaUmidade || (tempoAtual - ultimaPublicacao >= intervaloPublicacao)) {
        UltimaUmidade = Porcento;
        ultimaPublicacao = tempoAtual;

        char umidadeMensagem[50];
        snprintf(umidadeMensagem, sizeof(umidadeMensagem), "Umidade atual: %d%%", Porcento);
        client.publish("gabriel/agua/umidade", umidadeMensagem);

        Serial.print("Umidade: ");
        Serial.print(Porcento);
        Serial.println("%");
    }

    // Controle automático da bomba
    if (!ManualOverride) {
        if (Porcento < 50) { // Baixa umidade, desliga a bomba
            if (digitalRead(Rele) == HIGH) {
                Serial.println("Baixa umidade detectada. Desligando a bomba.");
                digitalWrite(Rele, LOW);
                client.publish("gabriel/agua/status", "Bomba desligada (baixa umidade detectada)");
            }
        } else { // Umidade suficiente, mantém a bomba ligada
            if (digitalRead(Rele) == LOW) {
                Serial.println("Umidade adequada. Mantendo a bomba ligada.");
                digitalWrite(Rele, HIGH);
                client.publish("gabriel/agua/status", "Bomba ligada (umidade adequada)");
            }
        }
    }

    delay(1000);
}

void setup_wifi() {
    Serial.println("Conectando ao WiFi...");
    WiFi.begin(ssid, password);

    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }
    Serial.println("\nWiFi conectado!");
}

void reconnect() {
    while (!client.connected()) {
        Serial.println("Tentando se conectar ao MQTT...");
        if (client.connect("GabrielDevice")) { // Identificador único para seu dispositivo
            Serial.println("Conectado ao MQTT!");
            client.subscribe("gabriel/agua/controle"); // Subscrição ao tópico de controle
        } else {
            Serial.print("Falha, rc=");
            Serial.print(client.state());
            Serial.println(" Tentando novamente em 5 segundos...");
            delay(5000);
        }
    }
}

void callback(char* topic, byte* payload, unsigned int length) {
    String mensagem = "";
    for (int i = 0; i < length; i++) {
        mensagem += (char)payload[i];
    }

    Serial.print("Mensagem recebida [");
    Serial.print(topic);
    Serial.print("]: ");
    Serial.println(mensagem);

    if (String(topic) == "gabriel/agua/controle") {
        if (mensagem == "ligar") {
            digitalWrite(Rele, HIGH);
            ManualOverride = true;
            client.publish("gabriel/agua/status", "Bomba acionada manualmente");
        } else if (mensagem == "desligar") {
            digitalWrite(Rele, LOW);
            ManualOverride = true;
            client.publish("gabriel/agua/status", "Bomba desligada manualmente");
        } else if (mensagem == "auto") {
            ManualOverride = false;
            client.publish("gabriel/agua/status", "Controle automático ativado");
        }
    }
}
